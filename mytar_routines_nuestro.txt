#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "mytar.h"

extern char *use;

/** Copy nBytes bytes from the origin file to the destination file.
 *
 * origin: pointer to the FILE descriptor associated with the origin file
 * destination:  pointer to the FILE descriptor associated with the destination file
 * nBytes: number of bytes to copy
 *
 * Returns the number of bytes actually copied or -1 if an error occured.
 */
int
copynFile(FILE * origin, FILE * destination, int nBytes)
{
	int c=0, r=0, i=0;
	while ((c = getc(origin)) != EOF) 
	{
		r=putc((unsigned char) c, destination);
		i++;
	}
	return i;
	// Complete the function
}

/** Loads a string from a file.
 *
 * file: pointer to the FILE descriptor 
 * 
 * The loadstr() function must allocate memory from the heap to store 
 * the contents of the string read from the FILE. 
 * Once the string has been properly built in memory, the function returns
 * the starting address of the string (pointer returned by malloc()) 
 * 
 * Returns: !=NULL if success, NULL if error
 */
char*
loadstr(FILE * file)
{
	int n = 0;
	char c;
	if (file != NULL) 
	{
		do 
		{
			read(&c, sizeof(char), 1, file);
			n++;
		} 
		while (!feof(file) && c != '\0');
		fseek(file, n * -1, SEEK_CUR);
		char* ch;
		ch = (char*) malloc(n * sizeof(unsigned char));
		int i = 0;
		do 
		{
			fread(&c, sizeof(char), 1, file);
			ch[i] = c;
			i++;
		} 
		while (c != 0 && c != '\0');
		return ch;
		}
	// Complete the function
	return NULL;
}

/** Read tarball header and store it in memory.
 *
 * tarFile: pointer to the tarball's FILE descriptor 
 * nFiles: output parameter. Used to return the number 
 * of files stored in the tarball archive (first 4 bytes of the header).
 *
 * On success it returns the starting memory address of an array that stores 
 * the (name,size) pairs read from the tar file. Upon failure, the function returns NULL.
 */
stHeaderEntry*
readHeader(FILE * tarFile, int *nFiles)
{

	int i,j;
	stHeaderEntry* header;

	fread(&nFiles, sizeof(unsigned int), 1, tarFile);
	/* Reservamos memoria para el array */
	header = (stHeaderEntry *) malloc(sizeof (stHeaderEntry) * (*nFiles));
	 for (i = 0; i < *nFiles; i++) {
	//... usamos loadstr para cargar el nombre en header[i].name
	//... comprobación y tratamiento de errores
	//... leemos el tamaño del fichero y lo almacenamos en header[i].size
		header[i].name = loadstr(tarFile);
		fread(&header[i].size, sizeof(unsigned int), 1, tarFile);
	}
	return header;
}

/** Creates a tarball archive 
 *
 * nfiles: number of files to be stored in the tarball
 * filenames: array with the path names of the files to be included in the tarball
 * tarname: name of the tarball archive
 * 
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First reserve room in the file to store the tarball header.
 * Move the file's position indicator to the data section (skip the header)
 * and dump the contents of the source files (one by one) in the tarball archive. 
 * At the same time, build the representation of the tarball header in memory.
 * Finally, rewind the file's position indicator, write the number of files as well as 
 * the (file name,file size) pairs in the tar archive.
 *
 * Important reminder: to calculate the room needed for the header, a simple sizeof 
 * of stHeaderEntry will not work. Bear in mind that, on disk, file names found in (name,size) 
 * pairs occupy strlen(name)+1 bytes.
 *
 */
int
createTar(int nFiles, char *fileNames[], char tarName[])
{
	int i=0;
	int tam=0;
		while(i<nFiles)
		{
		  tam= tam + strlen(fileNames[i])+1;
		  i++;	  
		}
	FILE *archivoDestino;
	FILE *archivoSalida = fopen(archivoDestino, "w+");
	
	tam= tam +4;
	tam = tam +(nFiles*sizeof(unsigned int));
	
	stHeaderEntry *archivos;
	archivos = malloc(tam);
	fseek(archivoSalida, tam, SEEK_SET);
	int j=0;
	FILE *archivo;
	while(j<nFiles)
	{
		archivo = fopen(fileNames[j], "r");
		archivos[j].size = copynFile(archivo, archivoSalida, sizeof(fileNames[j]));
		archivos[j].name = fileNames[j];
		fclose(archivo);
		j++;
	}
	
	rewind(archivoSalida);
	fwrite(&nFiles, sizeof(int), 1, archivoSalida);
	fseek(archivoSalida, sizeof(int), SEEK_SET);
	
	int k=0;
		while(k<nFiles){
			fwrite(archivos[k].name, strlen(fileNames[k]) + 1, 1, archivoSalida);
			fwrite(&archivos[k].size, sizeof(unsigned int), 1, archivoSalida);
			k++;

		}
	free(archivos);
	fclose(archivoSalida);
	return EXIT_SUCCESS;
	// Complete the function
}

/** Extract files stored in a tarball archive
 *
 * tarName: tarball's pathname
 *
 * On success, it returns EXIT_SUCCESS; upon error it returns EXIT_FAILURE. 
 * (macros defined in stdlib.h).
 *
 * HINTS: First load the tarball's header into memory.
 * After reading the header, the file position indicator will be located at the 
 * tarball's data section. By using information from the 
 * header --number of files and (file name, file size) pairs--, extract files 
 * stored in the data section of the tarball.
 *
 */
int
extractTar(char tarName[])
{
	int nFiles=0;
	int i;
	stHeaderEntry *archivos;
	archivos = (stHeaderEntry *) malloc(sizeof(stHeaderEntry) * (nFiles));
	
	FILE *archivo;
	archivo= fopen(tarName, "r");
	archivos = readHeader(archivo, &nFiles);
	char* c;
	for (i = 0; i < nFiles; i++) {
				FILE *archivoSalida = fopen(archivos[i].name, "w");
				if (archivos != NULL) {
					c = (unsigned char*) malloc(archivos[i].size);
					fread(c, sizeof(unsigned char) * archivos[i].size, 1, archivos);
					fwrite(c, sizeof(unsigned char) * archivos[i].size, 1, archivo);
					fclose(archivoSalida);
				}
				else{
					return EXIT_FAILURE;
				}
						}
						fclose(archivo);
						return EXIT_SUCCESS;
}