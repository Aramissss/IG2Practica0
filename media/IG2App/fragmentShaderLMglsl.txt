#version 330 core // learnopengl.com
out vec4 FragColor;
struct Material { // organización de los datos para uniform
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
struct Light { // organización de los datos para uniform
	vec3 position; // en world space
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
in vec3 FragPos; // en world space
in vec3 Normal; // en world space
in vec2 TexCoords;
uniform vec3 viewPos; // en world space
uniform Material material;
uniform Light light; // position en world space // ->
void main() {
	// ambient
	vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse= light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;
	vec3 viewDir = normalize(viewPos - FragPos);
	// specular
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular= light.specular *spec* texture(material.specular,
		TexCoords).rgb;
	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);
}